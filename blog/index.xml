<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Jamie Magee</title><link>/blog/</link><description>Recent content in Blogs on Jamie Magee</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 27 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Honey, I shrunk the npm package</title><link>/blog/honey-i-shrunk-the-npm-package/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>/blog/honey-i-shrunk-the-npm-package/</guid><description>Have you ever wondered what lies beneath the surface of an npm package? At its heart, it’s nothing more than a gzipped tarball. Working in software development, source code and binary artifacts are nearly always shipped as .tar.gz or .tgz files. And gzip compression is supported by every HTTP server and web browser out there. caniuse.com doesn’t even give statistics for support, it just says “supported in effectively all browsers”. But here&amp;rsquo;s the kicker: gzip is starting to show its age, making way for newer, more modern compression algorithms like Brotli and ZStandard.</description></item><item><title>Container Plumbing Days 2023—Windows containers: The forgotten stepchild</title><link>/blog/container-plumbing-days-2023-windows-containers/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>/blog/container-plumbing-days-2023-windows-containers/</guid><description>When it comes to Linux containers, there are plenty of tools out there that can scan container images, generate Software Bill of Materials (SBOM), or list vulnerabilities. However, Windows container images are more like the forgotten stepchild in the container ecosystem. And that means we’re forgetting the countless developers using Windows containers, too.
Instead of allowing this gap to widen further, container tool authors—especially SBOM tools and vulnerability scanners—need to add support for Windows container images.</description></item><item><title>Your Jest tests might be wrong</title><link>/blog/your-jest-tests-might-be-wrong/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>/blog/your-jest-tests-might-be-wrong/</guid><description>Is your Jest test suite failing you? You might not be using the testing framework&amp;rsquo;s full potential, especially when it comes to preventing state leakage between tests. The Jest settings clearMocks, resetMocks, restoreMocks, and resetModules are set to false by default. If you haven’t changed these defaults, your tests might be fragile, order-dependent, or just downright wrong. In this blog post, I’ll dig into what each setting does, and how you can fix your tests.</description></item><item><title>Maintaining AUR packages with Renovate</title><link>/blog/maintaining-aur-packages-with-renovate/</link><pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate><guid>/blog/maintaining-aur-packages-with-renovate/</guid><description>One big advantage that Arch Linux has over other distributions, apart from being able to say “BTW I use Arch.”, is the Arch User Repository (AUR). It’s a community-driven repository with over 80,000 packages. If you’re looking for a package, chances are you&amp;rsquo;ll find it in the AUR.
Keeping all those packages up to date, takes a lot of manual effort by a lot of volunteers. People have created and used tools, like urlwatch and aurpublish, to let them know when upstream releases are cut and automate some parts of the process.</description></item><item><title>Scanning Windows container images is (surprisingly) easy!</title><link>/blog/scanning-windows-container-images-is-surprisingly-easy/</link><pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate><guid>/blog/scanning-windows-container-images-is-surprisingly-easy/</guid><description>When it comes to Linux containers, there are plenty of tools out there that can scan container images, generate Software Bill of Materials (SBOM), or list vulnerabilities. However, Windows container images are more like the forgotten stepchild in the container ecosystem. And that means we’re forgetting the countless developers using Windows containers, too.
I wanted to see what I’d need to make scanning tools for Windows container images. Turns out it’s pretty easy.</description></item><item><title>Making the most of GitHub rate limits</title><link>/blog/making-the-most-of-github-rate-limits/</link><pubDate>Tue, 26 Jul 2022 08:19:08 +0000</pubDate><guid>/blog/making-the-most-of-github-rate-limits/</guid><description>The GitHub documentation has a lot of good advice about rate limits for its API, and how to make the most of them. However, since using the GitHub API, there are some things I’ve discovered that the documentation doesn’t cover, or doesn’t cover so well.
Conditional requests This topic is actually covered very well in the GitHub documentation. To summarise, all REST API requests will return ETag headers, and most will return Last-Modified.</description></item><item><title>Writing GitHub bots in .NET</title><link>/blog/writing-github-bots-in-net/</link><pubDate>Fri, 04 Mar 2022 05:40:46 +0000</pubDate><guid>/blog/writing-github-bots-in-net/</guid><description>For a while now the Octokit libraries for .NET have lagged behind the JavaScript libraries, especially when it comes to webhooks. Unfortunately, I needed a GitHub webhook client for an internal project, so I had to write my own. It wasn’t too much extra effort to open source it, and thus Octokit.Webhooks was born!
I wanted to give a quick example of how to get up and running with Octokit.Webhooks, and what better way than to write a small GitHub bot?</description></item><item><title>Netlify billing Denial-of-Service</title><link>/blog/netlify-billing-denial-of-service/</link><pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/netlify-billing-denial-of-service/</guid><description>At its heart, Netlify is a platform for hosting static websites. I initially started using it as an alternative to GitHub Pages, and features like Netlify CMS and preview deploys really won me over. However, I recently got bit by preview deploys and the build minutes pricing.
I had a few GitHub repos set up to automatically deploy to Netlify previews from pull requests. I had also configured Renovate to automatically open pull requests for my dependencies.</description></item><item><title>Tech stack #10YearChallenge</title><link>/blog/tech-stack-10-year-challenge/</link><pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate><guid>/blog/tech-stack-10-year-challenge/</guid><description>#10YearChallenge has been trending for a while, so I thought it would be fun to do a 10 year challenge for programming and take a look at the technology I used back in 2010.
2010 10 years ago covers my final year in high school, and my first year in university. Both used completely different programming languages and tech stacks, so it&amp;rsquo;s an interesting place to look back at.
I was running Windows on my personal machine, but the computers in the engineering department at my university were running Linux (SUSE if I recall correctly).</description></item><item><title>Common async pitfalls—part two</title><link>/blog/common-async-pitfalls-part-two/</link><pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/common-async-pitfalls-part-two/</guid><description>Following on from part one, here&amp;rsquo;s some more of the most common pitfalls I&amp;rsquo;ve come across—either myself, colleagues and friends, or examples in documentation—and how to avoid them.
&amp;lsquo;Fake&amp;rsquo;-sync is not async If the method you are calling is synchronous, even in an async method, then call it like any other synchronous method. If you want to yield the thread, then you should use Task.Yield in most cases. For UI programming, see this note about Task.</description></item><item><title>Common async pitfalls—part one</title><link>/blog/common-async-pitfalls-part-one/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/common-async-pitfalls-part-one/</guid><description>The .NET Framework provides a great programming model that enables high performance code using an easy to understand syntax. However, this can often give developers a false sense of security, and the language and runtime aren&amp;rsquo;t without pitfalls. Ideally static analysers, like the Microsoft.VisualStudio.Threading.Analyzers Roslyn analysers, would catch all these issues at build time. While they do help catch a lot of mistakes, they can&amp;rsquo;t catch everything, so it&amp;rsquo;s important to understand the problems and how to avoid them.</description></item><item><title>Zwift on Linux</title><link>/blog/zwift-on-linux/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>/blog/zwift-on-linux/</guid><description>Getting Zwift to run on Linux was a journey I started just over a year ago. I didn&amp;rsquo;t get very far with my effort, but since then a lot of progress has been made by the Wine developers and others in the community, and Zwift is now (mostly) playable on Linux. I&amp;rsquo;ll admit there are some workarounds required. Like having to use the Zwift companion app to connect sensors. But on the whole, it works well.</description></item><item><title>How to host your Helm chart repository on GitHub</title><link>/blog/how-to-host-your-helm-chart-repository-on-github/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>/blog/how-to-host-your-helm-chart-repository-on-github/</guid><description>Since the release of Helm 3, the official helm/charts repository has been deprecated in favour of Helm Hub. While it&amp;rsquo;s great for decentralization and the long term sustainability of the project, I think there&amp;rsquo;s a lot more that is lost. Where is the best place to go for of the expert advice now? Installing Helm now requires you to manually add each repository you use. And there&amp;rsquo;s now some added friction to hosting your Helm charts.</description></item><item><title>7 tips for converting C# code to async/await</title><link>/blog/7-tips-for-converting-csharp-code-to-async-await/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>/blog/7-tips-for-converting-csharp-code-to-async-await/</guid><description>Over the past year I&amp;rsquo;ve moved from working mainly in Java, to working mainly in C#. To be honest, Java and C# have more in common than not, but one of the major differences is async/await. It&amp;rsquo;s a really powerful tool if used correctly, but also a very quick way to shoot yourself in the foot.
Asynchronous programming looks very similar to synchronous programming. However, there are some core concepts which need to be understood in order to form a proper mental model when converting between synchronous and asynchronous programming patterns.</description></item><item><title>Automated Dependency Updates</title><link>/blog/automated-dependency-updates/</link><pubDate>Wed, 23 Oct 2019 13:51:01 +0000</pubDate><guid>/blog/automated-dependency-updates/</guid><description>At CopenhagenJS in August I was able to share my work on Renovate—a universal dependency update tool—and how you can use it to save time and improve security in software projects.
If you want to find out more about Renovate you can find us on GitHub.</description></item><item><title>Access: Hack The Box writeup</title><link>/blog/access-htb-writeup/</link><pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate><guid>/blog/access-htb-writeup/</guid><description>Recently I discovered Hack The Box, an online platform to hone your cyber security skills by practising on vulnerable VMs. The first box I solved is called Access. In this blog post I&amp;rsquo;ll walk through how I solved it. If you don&amp;rsquo;t want any spoilers, look away now!
Information gathering Let&amp;rsquo;s start with an nmap scan to see what services are running on the box.
1# nmap -n -v -Pn -p- -A --reason -oN nmap.</description></item><item><title>Twitter Hashflags (_Hash-what?_)</title><link>/blog/twitter-hashflags/</link><pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate><guid>/blog/twitter-hashflags/</guid><description>Have you ever tweeted out a hastag, and discovered a small image attached to the side of it? It could be for #StPatricksDay, #MarchForOurLives, or whatever #白白白白白白白白白白 is meant to be. These are hashflags.
A hashflag, sometimes called Twitter emoji, is a small image that appears after a #hashtag for special events. They are not regular emoji, and you can only use them on the Twitter website, or the official Twitter apps.</description></item><item><title>A survey of robots.txt - part two</title><link>/blog/a-survey-of-robots-txt-part-two/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>/blog/a-survey-of-robots-txt-part-two/</guid><description>In part one of this article, I collected robots.txt from the top 1 million sites on the web. In this article I&amp;rsquo;m going to do some analysis, and see if there&amp;rsquo;s anything interesting to find from all the files I&amp;rsquo;ve collected.
First we&amp;rsquo;ll start with some setup.
1%matplotlib inline 2 3import pandas as pd 4import numpy as np 5import glob 6import os 7import matplotlib Next I&amp;rsquo;m going to load the content of each file into my pandas dataframe, calculate the file size, and store that for later.</description></item><item><title>A survey of robots.txt - part one</title><link>/blog/a-survey-of-robots-txt-part-one/</link><pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate><guid>/blog/a-survey-of-robots-txt-part-one/</guid><description>After reading CollinMorris&amp;rsquo;s analysis of favicons of the top 1 million sites on the web, I thought it would be interesting to do the same for other common parts of websites that often get overlooked.
The robots.txt file is a plain text file found at on most websites which communicates information to web crawlers and spiders about how to scan a website.. For example, here&amp;rsquo;s an excerpt from robots.txt for google.</description></item><item><title>Setting up nginx reverse proxy with Let's Encrypt on unRAID</title><link>/blog/setting-up-nginx-reverse-proxy-with-lets-encrypt-on-unraid/</link><pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate><guid>/blog/setting-up-nginx-reverse-proxy-with-lets-encrypt-on-unraid/</guid><description>Late last year I set about building a new NAS to replace my aging HP ProLiant MicroServer N36L (though that&amp;rsquo;s a story for a different post). I decided to go with unRAID as my OS, over FreeNAS that I&amp;rsquo;d been running previously, mostly due to the simpler configuration, ease of expanding an array, and support for Docker and KVM.
Docker support makes it a lot easier to run some of the web apps that I rely on like Plex, Sonarr, CouchPotato and more, but accessing them securely outside my network is a different story.</description></item><item><title>Do you really want "bank grade" security in your SSL? Danish edition</title><link>/blog/do-you-want-bank-grade-ssl-danish-edition/</link><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>/blog/do-you-want-bank-grade-ssl-danish-edition/</guid><description>I recently saw an article on /r/programming called Do you really want &amp;ldquo;bank grade&amp;rdquo; security in your SSL? Here&amp;rsquo;s how Aussie banks fare. The author used the Qualys SSL Labs test to determine how good Aussie banks&amp;rsquo; SSL implementations really are. I thought the article was great, and gave good, actionable feedback. At the time of writing this two of the banks listed have already improved their SSL scores.
It got me thinking: how well (or badly) do banks in Denmark fare?</description></item><item><title>Continuously deploy Jekyll to Azure Web Apps</title><link>/blog/continuous-deployment-jekyll-to-azure/</link><pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate><guid>/blog/continuous-deployment-jekyll-to-azure/</guid><description>I&amp;rsquo;ve been thinking about writing a blog for a while now, but there are just so many blogging platforms out there to choose from. I finally settled on Jekyll as it&amp;rsquo;s really lightweight (compared to platforms like Wordpress), it has an active development community, and you can write all your articles in Markdown.
Many Jekyll users host their Jekyll sites through GitHub Pages, and there are a lot of advantages to this:</description></item></channel></rss>